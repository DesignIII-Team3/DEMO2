
IC_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001124  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080012ac  080012b4  000112b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080012ac  080012ac  000112ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080012b0  080012b0  000112b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000112b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000112b4  2**0
                  CONTENTS
  7 .bss          000017f0  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200017f0  200017f0  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000112b4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002378  00000000  00000000  000112e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000064d  00000000  00000000  0001365c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000001c0  00000000  00000000  00013cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000178  00000000  00000000  00013e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000c31  00000000  00000000  00013fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000011f1  00000000  00000000  00014c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00015e0a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000054c  00000000  00000000  00015e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000163d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001294 	.word	0x08001294

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08001294 	.word	0x08001294

080001c8 <UART4_IRQHandler>:

}


void UART4_IRQHandler(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
    if(UART4->SR & USART_SR_RXNE)
 80001ce:	4b1f      	ldr	r3, [pc, #124]	; (800024c <UART4_IRQHandler+0x84>)
 80001d0:	881b      	ldrh	r3, [r3, #0]
 80001d2:	b29b      	uxth	r3, r3
 80001d4:	f003 0320 	and.w	r3, r3, #32
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d031      	beq.n	8000240 <UART4_IRQHandler+0x78>
    {
    	char ByteRecu;
        ByteRecu = UART4->DR;
 80001dc:	4b1b      	ldr	r3, [pc, #108]	; (800024c <UART4_IRQHandler+0x84>)
 80001de:	889b      	ldrh	r3, [r3, #4]
 80001e0:	b29b      	uxth	r3, r3
 80001e2:	71fb      	strb	r3, [r7, #7]
        UART_CB_RX[RX_TeteEcriture] = ByteRecu;
 80001e4:	4b1a      	ldr	r3, [pc, #104]	; (8000250 <UART4_IRQHandler+0x88>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	4619      	mov	r1, r3
 80001ec:	4a19      	ldr	r2, [pc, #100]	; (8000254 <UART4_IRQHandler+0x8c>)
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	5453      	strb	r3, [r2, r1]
        RX_TeteEcriture++;
 80001f2:	4b17      	ldr	r3, [pc, #92]	; (8000250 <UART4_IRQHandler+0x88>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	3301      	adds	r3, #1
 80001fa:	b2da      	uxtb	r2, r3
 80001fc:	4b14      	ldr	r3, [pc, #80]	; (8000250 <UART4_IRQHandler+0x88>)
 80001fe:	701a      	strb	r2, [r3, #0]
        if(RX_TeteEcriture >= TAILLE_DU_BUFFER_RX){
 8000200:	4b13      	ldr	r3, [pc, #76]	; (8000250 <UART4_IRQHandler+0x88>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	b2db      	uxtb	r3, r3
 8000206:	2b13      	cmp	r3, #19
 8000208:	d902      	bls.n	8000210 <UART4_IRQHandler+0x48>
        	RX_TeteEcriture = 0;
 800020a:	4b11      	ldr	r3, [pc, #68]	; (8000250 <UART4_IRQHandler+0x88>)
 800020c:	2200      	movs	r2, #0
 800020e:	701a      	strb	r2, [r3, #0]
        }
        if(GPIOD->ODR & BIT14){
 8000210:	4b11      	ldr	r3, [pc, #68]	; (8000258 <UART4_IRQHandler+0x90>)
 8000212:	695b      	ldr	r3, [r3, #20]
 8000214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000218:	2b00      	cmp	r3, #0
 800021a:	d005      	beq.n	8000228 <UART4_IRQHandler+0x60>
        	GPIOD->ODR &= ~BIT14;
 800021c:	4a0e      	ldr	r2, [pc, #56]	; (8000258 <UART4_IRQHandler+0x90>)
 800021e:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <UART4_IRQHandler+0x90>)
 8000220:	695b      	ldr	r3, [r3, #20]
 8000222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000226:	6153      	str	r3, [r2, #20]
        }
        if(!(GPIOD->ODR & BIT14)){
 8000228:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <UART4_IRQHandler+0x90>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000230:	2b00      	cmp	r3, #0
 8000232:	d105      	bne.n	8000240 <UART4_IRQHandler+0x78>
        	GPIOD->ODR |= BIT14;
 8000234:	4a08      	ldr	r2, [pc, #32]	; (8000258 <UART4_IRQHandler+0x90>)
 8000236:	4b08      	ldr	r3, [pc, #32]	; (8000258 <UART4_IRQHandler+0x90>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800023e:	6153      	str	r3, [r2, #20]
        }

    }
}
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr
 800024c:	40004c00 	.word	0x40004c00
 8000250:	20000064 	.word	0x20000064
 8000254:	20000068 	.word	0x20000068
 8000258:	40020c00 	.word	0x40020c00

0800025c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000266:	4909      	ldr	r1, [pc, #36]	; (800028c <NVIC_EnableIRQ+0x30>)
 8000268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026c:	095b      	lsrs	r3, r3, #5
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	f002 021f 	and.w	r2, r2, #31
 8000274:	2001      	movs	r0, #1
 8000276:	fa00 f202 	lsl.w	r2, r0, r2
 800027a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	e000e100 	.word	0xe000e100

08000290 <TIM4_CH1_PWM_Init>:

int CH4_buffer[ARRAY_SIZE];
int CH4_i = 0;


void TIM4_CH1_PWM_Init(){
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000294:	4a1c      	ldr	r2, [pc, #112]	; (8000308 <TIM4_CH1_PWM_Init+0x78>)
 8000296:	4b1c      	ldr	r3, [pc, #112]	; (8000308 <TIM4_CH1_PWM_Init+0x78>)
 8000298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800029a:	f043 0304 	orr.w	r3, r3, #4
 800029e:	6413      	str	r3, [r2, #64]	; 0x40
	TIM4->PSC = 268 - 1;
 80002a0:	4b1a      	ldr	r3, [pc, #104]	; (800030c <TIM4_CH1_PWM_Init+0x7c>)
 80002a2:	f240 120b 	movw	r2, #267	; 0x10b
 80002a6:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM4->ARR = 100 -1;
 80002a8:	4b18      	ldr	r3, [pc, #96]	; (800030c <TIM4_CH1_PWM_Init+0x7c>)
 80002aa:	2263      	movs	r2, #99	; 0x63
 80002ac:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCMR1 &= ~TIM_CCMR1_OC1M;
 80002ae:	4a17      	ldr	r2, [pc, #92]	; (800030c <TIM4_CH1_PWM_Init+0x7c>)
 80002b0:	4b16      	ldr	r3, [pc, #88]	; (800030c <TIM4_CH1_PWM_Init+0x7c>)
 80002b2:	8b1b      	ldrh	r3, [r3, #24]
 80002b4:	b29b      	uxth	r3, r3
 80002b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	8313      	strh	r3, [r2, #24]
	TIM4->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 80002be:	4a13      	ldr	r2, [pc, #76]	; (800030c <TIM4_CH1_PWM_Init+0x7c>)
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <TIM4_CH1_PWM_Init+0x7c>)
 80002c2:	8b1b      	ldrh	r3, [r3, #24]
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	8313      	strh	r3, [r2, #24]
	TIM4->CCMR1 |= TIM_CCMR1_OC1PE;
 80002ce:	4a0f      	ldr	r2, [pc, #60]	; (800030c <TIM4_CH1_PWM_Init+0x7c>)
 80002d0:	4b0e      	ldr	r3, [pc, #56]	; (800030c <TIM4_CH1_PWM_Init+0x7c>)
 80002d2:	8b1b      	ldrh	r3, [r3, #24]
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	f043 0308 	orr.w	r3, r3, #8
 80002da:	b29b      	uxth	r3, r3
 80002dc:	8313      	strh	r3, [r2, #24]
	TIM4->CCER |= TIM_CCER_CC1E;
 80002de:	4a0b      	ldr	r2, [pc, #44]	; (800030c <TIM4_CH1_PWM_Init+0x7c>)
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <TIM4_CH1_PWM_Init+0x7c>)
 80002e2:	8c1b      	ldrh	r3, [r3, #32]
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	8413      	strh	r3, [r2, #32]
	TIM4->CR1 |= TIM_CR1_CEN;
 80002ee:	4a07      	ldr	r2, [pc, #28]	; (800030c <TIM4_CH1_PWM_Init+0x7c>)
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <TIM4_CH1_PWM_Init+0x7c>)
 80002f2:	881b      	ldrh	r3, [r3, #0]
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	8013      	strh	r3, [r2, #0]
}
 80002fe:	bf00      	nop
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40023800 	.word	0x40023800
 800030c:	40000800 	.word	0x40000800

08000310 <configureGPIOB6>:

void configureGPIOB6(){
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000314:	4a11      	ldr	r2, [pc, #68]	; (800035c <configureGPIOB6+0x4c>)
 8000316:	4b11      	ldr	r3, [pc, #68]	; (800035c <configureGPIOB6+0x4c>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031a:	f043 0302 	orr.w	r3, r3, #2
 800031e:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER &= ~GPIO_MODER_MODER6;
 8000320:	4a0f      	ldr	r2, [pc, #60]	; (8000360 <configureGPIOB6+0x50>)
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <configureGPIOB6+0x50>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800032a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODER6_1);
 800032c:	4a0c      	ldr	r2, [pc, #48]	; (8000360 <configureGPIOB6+0x50>)
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <configureGPIOB6+0x50>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000336:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] |= (2 << 24);
 8000338:	4a09      	ldr	r2, [pc, #36]	; (8000360 <configureGPIOB6+0x50>)
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <configureGPIOB6+0x50>)
 800033c:	6a1b      	ldr	r3, [r3, #32]
 800033e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000342:	6213      	str	r3, [r2, #32]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_6;
 8000344:	4a06      	ldr	r2, [pc, #24]	; (8000360 <configureGPIOB6+0x50>)
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <configureGPIOB6+0x50>)
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800034e:	6053      	str	r3, [r2, #4]
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40023800 	.word	0x40023800
 8000360:	40020400 	.word	0x40020400

08000364 <TIM4_CH2_PWM_Init>:

void TIM4_CH2_PWM_Init(){
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000368:	4a1c      	ldr	r2, [pc, #112]	; (80003dc <TIM4_CH2_PWM_Init+0x78>)
 800036a:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <TIM4_CH2_PWM_Init+0x78>)
 800036c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800036e:	f043 0304 	orr.w	r3, r3, #4
 8000372:	6413      	str	r3, [r2, #64]	; 0x40
	// Set prescaler to 268
	TIM4->PSC = 268 - 1;
 8000374:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <TIM4_CH2_PWM_Init+0x7c>)
 8000376:	f240 120b 	movw	r2, #267	; 0x10b
 800037a:	851a      	strh	r2, [r3, #40]	; 0x28
	// Set auto-reload value to 100
	TIM4->ARR = 100 - 1;
 800037c:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <TIM4_CH2_PWM_Init+0x7c>)
 800037e:	2263      	movs	r2, #99	; 0x63
 8000380:	62da      	str	r2, [r3, #44]	; 0x2c
	// Enable PWM mode 1 on channel 2
	TIM4->CCMR1 &= ~TIM_CCMR1_OC2M;
 8000382:	4a17      	ldr	r2, [pc, #92]	; (80003e0 <TIM4_CH2_PWM_Init+0x7c>)
 8000384:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <TIM4_CH2_PWM_Init+0x7c>)
 8000386:	8b1b      	ldrh	r3, [r3, #24]
 8000388:	b29b      	uxth	r3, r3
 800038a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800038e:	b29b      	uxth	r3, r3
 8000390:	8313      	strh	r3, [r2, #24]
	TIM4->CCMR1 |= (TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1);
 8000392:	4a13      	ldr	r2, [pc, #76]	; (80003e0 <TIM4_CH2_PWM_Init+0x7c>)
 8000394:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <TIM4_CH2_PWM_Init+0x7c>)
 8000396:	8b1b      	ldrh	r3, [r3, #24]
 8000398:	b29b      	uxth	r3, r3
 800039a:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800039e:	b29b      	uxth	r3, r3
 80003a0:	8313      	strh	r3, [r2, #24]
	// Enable preload register on channel 2
	TIM4->CCMR1 |= TIM_CCMR1_OC2PE;
 80003a2:	4a0f      	ldr	r2, [pc, #60]	; (80003e0 <TIM4_CH2_PWM_Init+0x7c>)
 80003a4:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <TIM4_CH2_PWM_Init+0x7c>)
 80003a6:	8b1b      	ldrh	r3, [r3, #24]
 80003a8:	b29b      	uxth	r3, r3
 80003aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003ae:	b29b      	uxth	r3, r3
 80003b0:	8313      	strh	r3, [r2, #24]
	// Enable capture/compare channel 2
	TIM4->CCER |= TIM_CCER_CC2E;
 80003b2:	4a0b      	ldr	r2, [pc, #44]	; (80003e0 <TIM4_CH2_PWM_Init+0x7c>)
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <TIM4_CH2_PWM_Init+0x7c>)
 80003b6:	8c1b      	ldrh	r3, [r3, #32]
 80003b8:	b29b      	uxth	r3, r3
 80003ba:	f043 0310 	orr.w	r3, r3, #16
 80003be:	b29b      	uxth	r3, r3
 80003c0:	8413      	strh	r3, [r2, #32]
	// Enable counter
	TIM4->CR1 |= TIM_CR1_CEN;
 80003c2:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <TIM4_CH2_PWM_Init+0x7c>)
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <TIM4_CH2_PWM_Init+0x7c>)
 80003c6:	881b      	ldrh	r3, [r3, #0]
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	f043 0301 	orr.w	r3, r3, #1
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	8013      	strh	r3, [r2, #0]
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	40023800 	.word	0x40023800
 80003e0:	40000800 	.word	0x40000800

080003e4 <configureGPIOB7>:

void configureGPIOB7(){
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80003e8:	4a11      	ldr	r2, [pc, #68]	; (8000430 <configureGPIOB7+0x4c>)
 80003ea:	4b11      	ldr	r3, [pc, #68]	; (8000430 <configureGPIOB7+0x4c>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ee:	f043 0302 	orr.w	r3, r3, #2
 80003f2:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER &= ~GPIO_MODER_MODER7;
 80003f4:	4a0f      	ldr	r2, [pc, #60]	; (8000434 <configureGPIOB7+0x50>)
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <configureGPIOB7+0x50>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003fe:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODER7_1);
 8000400:	4a0c      	ldr	r2, [pc, #48]	; (8000434 <configureGPIOB7+0x50>)
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <configureGPIOB7+0x50>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800040a:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] |= (2 << 28);
 800040c:	4a09      	ldr	r2, [pc, #36]	; (8000434 <configureGPIOB7+0x50>)
 800040e:	4b09      	ldr	r3, [pc, #36]	; (8000434 <configureGPIOB7+0x50>)
 8000410:	6a1b      	ldr	r3, [r3, #32]
 8000412:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000416:	6213      	str	r3, [r2, #32]
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_7;
 8000418:	4a06      	ldr	r2, [pc, #24]	; (8000434 <configureGPIOB7+0x50>)
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <configureGPIOB7+0x50>)
 800041c:	685b      	ldr	r3, [r3, #4]
 800041e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000422:	6053      	str	r3, [r2, #4]
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40023800 	.word	0x40023800
 8000434:	40020400 	.word	0x40020400

08000438 <TIM4_CH3_PWM_Init>:

void TIM4_CH3_PWM_Init(){
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800043c:	4a1c      	ldr	r2, [pc, #112]	; (80004b0 <TIM4_CH3_PWM_Init+0x78>)
 800043e:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <TIM4_CH3_PWM_Init+0x78>)
 8000440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6413      	str	r3, [r2, #64]	; 0x40
	// Set prescaler to 268
	TIM4->PSC = 268 - 1;
 8000448:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <TIM4_CH3_PWM_Init+0x7c>)
 800044a:	f240 120b 	movw	r2, #267	; 0x10b
 800044e:	851a      	strh	r2, [r3, #40]	; 0x28
	// Set auto-reload value to 100
	TIM4->ARR = 100 -1;
 8000450:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <TIM4_CH3_PWM_Init+0x7c>)
 8000452:	2263      	movs	r2, #99	; 0x63
 8000454:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable PWM mode 1 on channel 3
	TIM4->CCMR2 &= ~TIM_CCMR2_OC3M;
 8000456:	4a17      	ldr	r2, [pc, #92]	; (80004b4 <TIM4_CH3_PWM_Init+0x7c>)
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <TIM4_CH3_PWM_Init+0x7c>)
 800045a:	8b9b      	ldrh	r3, [r3, #28]
 800045c:	b29b      	uxth	r3, r3
 800045e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000462:	b29b      	uxth	r3, r3
 8000464:	8393      	strh	r3, [r2, #28]
	TIM4->CCMR2 |= (TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1);
 8000466:	4a13      	ldr	r2, [pc, #76]	; (80004b4 <TIM4_CH3_PWM_Init+0x7c>)
 8000468:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <TIM4_CH3_PWM_Init+0x7c>)
 800046a:	8b9b      	ldrh	r3, [r3, #28]
 800046c:	b29b      	uxth	r3, r3
 800046e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000472:	b29b      	uxth	r3, r3
 8000474:	8393      	strh	r3, [r2, #28]
	// Enable preload register on channel 3
	TIM4->CCMR2 |= TIM_CCMR2_OC3PE;
 8000476:	4a0f      	ldr	r2, [pc, #60]	; (80004b4 <TIM4_CH3_PWM_Init+0x7c>)
 8000478:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <TIM4_CH3_PWM_Init+0x7c>)
 800047a:	8b9b      	ldrh	r3, [r3, #28]
 800047c:	b29b      	uxth	r3, r3
 800047e:	f043 0308 	orr.w	r3, r3, #8
 8000482:	b29b      	uxth	r3, r3
 8000484:	8393      	strh	r3, [r2, #28]

	// Enable capture/compare channel 3
	TIM4->CCER |= TIM_CCER_CC3E;
 8000486:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <TIM4_CH3_PWM_Init+0x7c>)
 8000488:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <TIM4_CH3_PWM_Init+0x7c>)
 800048a:	8c1b      	ldrh	r3, [r3, #32]
 800048c:	b29b      	uxth	r3, r3
 800048e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000492:	b29b      	uxth	r3, r3
 8000494:	8413      	strh	r3, [r2, #32]
	// Enable counter
	TIM4->CR1 |= TIM_CR1_CEN;
 8000496:	4a07      	ldr	r2, [pc, #28]	; (80004b4 <TIM4_CH3_PWM_Init+0x7c>)
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <TIM4_CH3_PWM_Init+0x7c>)
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	b29b      	uxth	r3, r3
 800049e:	f043 0301 	orr.w	r3, r3, #1
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	8013      	strh	r3, [r2, #0]
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	40023800 	.word	0x40023800
 80004b4:	40000800 	.word	0x40000800

080004b8 <configureGPIOB8>:

void configureGPIOB8(){
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80004bc:	4a11      	ldr	r2, [pc, #68]	; (8000504 <configureGPIOB8+0x4c>)
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <configureGPIOB8+0x4c>)
 80004c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c2:	f043 0302 	orr.w	r3, r3, #2
 80004c6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER &= ~GPIO_MODER_MODER8;
 80004c8:	4a0f      	ldr	r2, [pc, #60]	; (8000508 <configureGPIOB8+0x50>)
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <configureGPIOB8+0x50>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80004d2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODER8_1);
 80004d4:	4a0c      	ldr	r2, [pc, #48]	; (8000508 <configureGPIOB8+0x50>)
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <configureGPIOB8+0x50>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004de:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] |= (2 << 0);
 80004e0:	4a09      	ldr	r2, [pc, #36]	; (8000508 <configureGPIOB8+0x50>)
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <configureGPIOB8+0x50>)
 80004e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004e6:	f043 0302 	orr.w	r3, r3, #2
 80004ea:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_8;
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <configureGPIOB8+0x50>)
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <configureGPIOB8+0x50>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004f6:	6053      	str	r3, [r2, #4]
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40023800 	.word	0x40023800
 8000508:	40020400 	.word	0x40020400

0800050c <TIM4_CH4_PWM_Init>:

void TIM4_CH4_PWM_Init(){
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000510:	4a1c      	ldr	r2, [pc, #112]	; (8000584 <TIM4_CH4_PWM_Init+0x78>)
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <TIM4_CH4_PWM_Init+0x78>)
 8000514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000516:	f043 0304 	orr.w	r3, r3, #4
 800051a:	6413      	str	r3, [r2, #64]	; 0x40
	// Set prescaler to 268
	TIM4->PSC = 268 - 1;
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <TIM4_CH4_PWM_Init+0x7c>)
 800051e:	f240 120b 	movw	r2, #267	; 0x10b
 8000522:	851a      	strh	r2, [r3, #40]	; 0x28
	// Set auto-reload value to 100
	TIM4->ARR = 100 - 1;
 8000524:	4b18      	ldr	r3, [pc, #96]	; (8000588 <TIM4_CH4_PWM_Init+0x7c>)
 8000526:	2263      	movs	r2, #99	; 0x63
 8000528:	62da      	str	r2, [r3, #44]	; 0x2c
	// Enable PWM mode 1 on channel 4
	TIM4->CCMR2 &= ~TIM_CCMR2_OC4M;
 800052a:	4a17      	ldr	r2, [pc, #92]	; (8000588 <TIM4_CH4_PWM_Init+0x7c>)
 800052c:	4b16      	ldr	r3, [pc, #88]	; (8000588 <TIM4_CH4_PWM_Init+0x7c>)
 800052e:	8b9b      	ldrh	r3, [r3, #28]
 8000530:	b29b      	uxth	r3, r3
 8000532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000536:	b29b      	uxth	r3, r3
 8000538:	8393      	strh	r3, [r2, #28]
	TIM4->CCMR2 |= (TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1);
 800053a:	4a13      	ldr	r2, [pc, #76]	; (8000588 <TIM4_CH4_PWM_Init+0x7c>)
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <TIM4_CH4_PWM_Init+0x7c>)
 800053e:	8b9b      	ldrh	r3, [r3, #28]
 8000540:	b29b      	uxth	r3, r3
 8000542:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000546:	b29b      	uxth	r3, r3
 8000548:	8393      	strh	r3, [r2, #28]
	// Enable preload register on channel 4
	TIM4->CCMR2 |= TIM_CCMR2_OC4PE;
 800054a:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <TIM4_CH4_PWM_Init+0x7c>)
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <TIM4_CH4_PWM_Init+0x7c>)
 800054e:	8b9b      	ldrh	r3, [r3, #28]
 8000550:	b29b      	uxth	r3, r3
 8000552:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000556:	b29b      	uxth	r3, r3
 8000558:	8393      	strh	r3, [r2, #28]
	// Enable capture/compare channel 4
	TIM4->CCER |= TIM_CCER_CC4E;
 800055a:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <TIM4_CH4_PWM_Init+0x7c>)
 800055c:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <TIM4_CH4_PWM_Init+0x7c>)
 800055e:	8c1b      	ldrh	r3, [r3, #32]
 8000560:	b29b      	uxth	r3, r3
 8000562:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000566:	b29b      	uxth	r3, r3
 8000568:	8413      	strh	r3, [r2, #32]
	// Enable counter
	TIM4->CR1 |= TIM_CR1_CEN;
 800056a:	4a07      	ldr	r2, [pc, #28]	; (8000588 <TIM4_CH4_PWM_Init+0x7c>)
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <TIM4_CH4_PWM_Init+0x7c>)
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	b29b      	uxth	r3, r3
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	b29b      	uxth	r3, r3
 8000578:	8013      	strh	r3, [r2, #0]
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	40023800 	.word	0x40023800
 8000588:	40000800 	.word	0x40000800

0800058c <configureGPIOB9>:

void configureGPIOB9(){
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000590:	4a11      	ldr	r2, [pc, #68]	; (80005d8 <configureGPIOB9+0x4c>)
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <configureGPIOB9+0x4c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f043 0302 	orr.w	r3, r3, #2
 800059a:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB->MODER &= ~GPIO_MODER_MODER9;
 800059c:	4a0f      	ldr	r2, [pc, #60]	; (80005dc <configureGPIOB9+0x50>)
 800059e:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <configureGPIOB9+0x50>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80005a6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODER9_1);
 80005a8:	4a0c      	ldr	r2, [pc, #48]	; (80005dc <configureGPIOB9+0x50>)
 80005aa:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <configureGPIOB9+0x50>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005b2:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] |= (2 << 4);
 80005b4:	4a09      	ldr	r2, [pc, #36]	; (80005dc <configureGPIOB9+0x50>)
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <configureGPIOB9+0x50>)
 80005b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ba:	f043 0320 	orr.w	r3, r3, #32
 80005be:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_9;
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <configureGPIOB9+0x50>)
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <configureGPIOB9+0x50>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80005ca:	6053      	str	r3, [r2, #4]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40020400 	.word	0x40020400

080005e0 <TIM5_CH1_IC_Init>:

void TIM5_CH1_IC_Init(){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80005e4:	4a27      	ldr	r2, [pc, #156]	; (8000684 <TIM5_CH1_IC_Init+0xa4>)
 80005e6:	4b27      	ldr	r3, [pc, #156]	; (8000684 <TIM5_CH1_IC_Init+0xa4>)
 80005e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ea:	f043 0308 	orr.w	r3, r3, #8
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40


	TIM5->CCMR1 &= ~TIM_CCMR1_CC1S;
 80005f0:	4a25      	ldr	r2, [pc, #148]	; (8000688 <TIM5_CH1_IC_Init+0xa8>)
 80005f2:	4b25      	ldr	r3, [pc, #148]	; (8000688 <TIM5_CH1_IC_Init+0xa8>)
 80005f4:	8b1b      	ldrh	r3, [r3, #24]
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	f023 0303 	bic.w	r3, r3, #3
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	8313      	strh	r3, [r2, #24]
	TIM5->CCMR1 |= TIM_CCMR1_CC1S_0;
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <TIM5_CH1_IC_Init+0xa8>)
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <TIM5_CH1_IC_Init+0xa8>)
 8000604:	8b1b      	ldrh	r3, [r3, #24]
 8000606:	b29b      	uxth	r3, r3
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	b29b      	uxth	r3, r3
 800060e:	8313      	strh	r3, [r2, #24]
	TIM5->CCER &= ~TIM_CCER_CC1P;
 8000610:	4a1d      	ldr	r2, [pc, #116]	; (8000688 <TIM5_CH1_IC_Init+0xa8>)
 8000612:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <TIM5_CH1_IC_Init+0xa8>)
 8000614:	8c1b      	ldrh	r3, [r3, #32]
 8000616:	b29b      	uxth	r3, r3
 8000618:	f023 0302 	bic.w	r3, r3, #2
 800061c:	b29b      	uxth	r3, r3
 800061e:	8413      	strh	r3, [r2, #32]
	TIM5->CCER |= TIM_CCER_CC1E;
 8000620:	4a19      	ldr	r2, [pc, #100]	; (8000688 <TIM5_CH1_IC_Init+0xa8>)
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <TIM5_CH1_IC_Init+0xa8>)
 8000624:	8c1b      	ldrh	r3, [r3, #32]
 8000626:	b29b      	uxth	r3, r3
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	b29b      	uxth	r3, r3
 800062e:	8413      	strh	r3, [r2, #32]
	TIM5->CCMR1 &= ~(BIT7 | BIT5 | BIT4);
 8000630:	4a15      	ldr	r2, [pc, #84]	; (8000688 <TIM5_CH1_IC_Init+0xa8>)
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <TIM5_CH1_IC_Init+0xa8>)
 8000634:	8b1b      	ldrh	r3, [r3, #24]
 8000636:	b29b      	uxth	r3, r3
 8000638:	f023 03b0 	bic.w	r3, r3, #176	; 0xb0
 800063c:	b29b      	uxth	r3, r3
 800063e:	8313      	strh	r3, [r2, #24]
	TIM5->CCMR1 |= (BIT6);
 8000640:	4a11      	ldr	r2, [pc, #68]	; (8000688 <TIM5_CH1_IC_Init+0xa8>)
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <TIM5_CH1_IC_Init+0xa8>)
 8000644:	8b1b      	ldrh	r3, [r3, #24]
 8000646:	b29b      	uxth	r3, r3
 8000648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800064c:	b29b      	uxth	r3, r3
 800064e:	8313      	strh	r3, [r2, #24]
	//TIM5->CCMR1 &= ~TIM_CCMR1_IC1F;
	TIM5->PSC = 26880 - 1;
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <TIM5_CH1_IC_Init+0xa8>)
 8000652:	f646 02ff 	movw	r2, #26879	; 0x68ff
 8000656:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM5->DIER |= TIM_DIER_CC1IE;
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <TIM5_CH1_IC_Init+0xa8>)
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <TIM5_CH1_IC_Init+0xa8>)
 800065c:	899b      	ldrh	r3, [r3, #12]
 800065e:	b29b      	uxth	r3, r3
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	b29b      	uxth	r3, r3
 8000666:	8193      	strh	r3, [r2, #12]


	NVIC_EnableIRQ(TIM5_IRQn);
 8000668:	2032      	movs	r0, #50	; 0x32
 800066a:	f7ff fdf7 	bl	800025c <NVIC_EnableIRQ>


	TIM5->CR1 |= TIM_CR1_CEN;
 800066e:	4a06      	ldr	r2, [pc, #24]	; (8000688 <TIM5_CH1_IC_Init+0xa8>)
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <TIM5_CH1_IC_Init+0xa8>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	b29b      	uxth	r3, r3
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	b29b      	uxth	r3, r3
 800067c:	8013      	strh	r3, [r2, #0]

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40000c00 	.word	0x40000c00

0800068c <configureGPIOA0>:


void configureGPIOA0(){
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	//AF2 Alternate function

	// Enable clock for GPIOA
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000690:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <configureGPIOA0+0x40>)
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <configureGPIOA0+0x40>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f043 0301 	orr.w	r3, r3, #1
 800069a:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PA6 as alternate function
	GPIOA->MODER &= ~GPIO_MODER_MODER0;
 800069c:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <configureGPIOA0+0x44>)
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <configureGPIOA0+0x44>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f023 0303 	bic.w	r3, r3, #3
 80006a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER0_1;
 80006a8:	4a09      	ldr	r2, [pc, #36]	; (80006d0 <configureGPIOA0+0x44>)
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <configureGPIOA0+0x44>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f043 0302 	orr.w	r3, r3, #2
 80006b2:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (2 << 0);
 80006b4:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <configureGPIOA0+0x44>)
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <configureGPIOA0+0x44>)
 80006b8:	6a1b      	ldr	r3, [r3, #32]
 80006ba:	f043 0302 	orr.w	r3, r3, #2
 80006be:	6213      	str	r3, [r2, #32]
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020000 	.word	0x40020000

080006d4 <TIM5_CH2_IC_Init>:

void TIM5_CH2_IC_Init(){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80006d8:	4a27      	ldr	r2, [pc, #156]	; (8000778 <TIM5_CH2_IC_Init+0xa4>)
 80006da:	4b27      	ldr	r3, [pc, #156]	; (8000778 <TIM5_CH2_IC_Init+0xa4>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40

	TIM5->CCMR1 &= ~TIM_CCMR1_CC2S;
 80006e4:	4a25      	ldr	r2, [pc, #148]	; (800077c <TIM5_CH2_IC_Init+0xa8>)
 80006e6:	4b25      	ldr	r3, [pc, #148]	; (800077c <TIM5_CH2_IC_Init+0xa8>)
 80006e8:	8b1b      	ldrh	r3, [r3, #24]
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	8313      	strh	r3, [r2, #24]
	TIM5->CCMR1 |= TIM_CCMR1_CC2S_0;
 80006f4:	4a21      	ldr	r2, [pc, #132]	; (800077c <TIM5_CH2_IC_Init+0xa8>)
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <TIM5_CH2_IC_Init+0xa8>)
 80006f8:	8b1b      	ldrh	r3, [r3, #24]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000700:	b29b      	uxth	r3, r3
 8000702:	8313      	strh	r3, [r2, #24]
	TIM5->CCER &= ~TIM_CCER_CC2P;
 8000704:	4a1d      	ldr	r2, [pc, #116]	; (800077c <TIM5_CH2_IC_Init+0xa8>)
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <TIM5_CH2_IC_Init+0xa8>)
 8000708:	8c1b      	ldrh	r3, [r3, #32]
 800070a:	b29b      	uxth	r3, r3
 800070c:	f023 0320 	bic.w	r3, r3, #32
 8000710:	b29b      	uxth	r3, r3
 8000712:	8413      	strh	r3, [r2, #32]
	TIM5->CCER |= TIM_CCER_CC2E;
 8000714:	4a19      	ldr	r2, [pc, #100]	; (800077c <TIM5_CH2_IC_Init+0xa8>)
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <TIM5_CH2_IC_Init+0xa8>)
 8000718:	8c1b      	ldrh	r3, [r3, #32]
 800071a:	b29b      	uxth	r3, r3
 800071c:	f043 0310 	orr.w	r3, r3, #16
 8000720:	b29b      	uxth	r3, r3
 8000722:	8413      	strh	r3, [r2, #32]
	TIM5->CCMR1 &= ~(BIT15 | BIT13 | BIT12);
 8000724:	4915      	ldr	r1, [pc, #84]	; (800077c <TIM5_CH2_IC_Init+0xa8>)
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <TIM5_CH2_IC_Init+0xa8>)
 8000728:	8b1b      	ldrh	r3, [r3, #24]
 800072a:	b29a      	uxth	r2, r3
 800072c:	f644 73ff 	movw	r3, #20479	; 0x4fff
 8000730:	4013      	ands	r3, r2
 8000732:	b29b      	uxth	r3, r3
 8000734:	830b      	strh	r3, [r1, #24]
	TIM5->CCMR1 |= (BIT14);
 8000736:	4a11      	ldr	r2, [pc, #68]	; (800077c <TIM5_CH2_IC_Init+0xa8>)
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <TIM5_CH2_IC_Init+0xa8>)
 800073a:	8b1b      	ldrh	r3, [r3, #24]
 800073c:	b29b      	uxth	r3, r3
 800073e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000742:	b29b      	uxth	r3, r3
 8000744:	8313      	strh	r3, [r2, #24]
	//TIM5->CCMR1 &= ~TIM_CCMR1_IC1F;
	TIM5->PSC = 26 - 1;
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <TIM5_CH2_IC_Init+0xa8>)
 8000748:	2219      	movs	r2, #25
 800074a:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM5->DIER |= TIM_DIER_CC2IE;
 800074c:	4a0b      	ldr	r2, [pc, #44]	; (800077c <TIM5_CH2_IC_Init+0xa8>)
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <TIM5_CH2_IC_Init+0xa8>)
 8000750:	899b      	ldrh	r3, [r3, #12]
 8000752:	b29b      	uxth	r3, r3
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	b29b      	uxth	r3, r3
 800075a:	8193      	strh	r3, [r2, #12]

	NVIC_EnableIRQ(TIM5_IRQn);
 800075c:	2032      	movs	r0, #50	; 0x32
 800075e:	f7ff fd7d 	bl	800025c <NVIC_EnableIRQ>

	TIM5->CR1 |= TIM_CR1_CEN;
 8000762:	4a06      	ldr	r2, [pc, #24]	; (800077c <TIM5_CH2_IC_Init+0xa8>)
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <TIM5_CH2_IC_Init+0xa8>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	b29b      	uxth	r3, r3
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	b29b      	uxth	r3, r3
 8000770:	8013      	strh	r3, [r2, #0]

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40000c00 	.word	0x40000c00

08000780 <configureGPIOA1>:

void configureGPIOA1(){
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
	//AF2 Alternate function

	// Enable clock for GPIOA
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000784:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <configureGPIOA1+0x40>)
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <configureGPIOA1+0x40>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f043 0301 	orr.w	r3, r3, #1
 800078e:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PA6 as alternate function
	GPIOA->MODER &= ~GPIO_MODER_MODER1;
 8000790:	4a0c      	ldr	r2, [pc, #48]	; (80007c4 <configureGPIOA1+0x44>)
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <configureGPIOA1+0x44>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f023 030c 	bic.w	r3, r3, #12
 800079a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER1_1;
 800079c:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <configureGPIOA1+0x44>)
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <configureGPIOA1+0x44>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f043 0308 	orr.w	r3, r3, #8
 80007a6:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (2 << 4);
 80007a8:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <configureGPIOA1+0x44>)
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <configureGPIOA1+0x44>)
 80007ac:	6a1b      	ldr	r3, [r3, #32]
 80007ae:	f043 0320 	orr.w	r3, r3, #32
 80007b2:	6213      	str	r3, [r2, #32]
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020000 	.word	0x40020000

080007c8 <TIM5_CH3_IC_Init>:

void TIM5_CH3_IC_Init(){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80007cc:	4a26      	ldr	r2, [pc, #152]	; (8000868 <TIM5_CH3_IC_Init+0xa0>)
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <TIM5_CH3_IC_Init+0xa0>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	f043 0308 	orr.w	r3, r3, #8
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40

	TIM5->CCMR2 &= ~TIM_CCMR2_CC3S;
 80007d8:	4a24      	ldr	r2, [pc, #144]	; (800086c <TIM5_CH3_IC_Init+0xa4>)
 80007da:	4b24      	ldr	r3, [pc, #144]	; (800086c <TIM5_CH3_IC_Init+0xa4>)
 80007dc:	8b9b      	ldrh	r3, [r3, #28]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	f023 0303 	bic.w	r3, r3, #3
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	8393      	strh	r3, [r2, #28]
	TIM5->CCMR2 |= TIM_CCMR2_CC3S_0;
 80007e8:	4a20      	ldr	r2, [pc, #128]	; (800086c <TIM5_CH3_IC_Init+0xa4>)
 80007ea:	4b20      	ldr	r3, [pc, #128]	; (800086c <TIM5_CH3_IC_Init+0xa4>)
 80007ec:	8b9b      	ldrh	r3, [r3, #28]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	8393      	strh	r3, [r2, #28]
	TIM5->CCER &= ~TIM_CCER_CC3P;
 80007f8:	4a1c      	ldr	r2, [pc, #112]	; (800086c <TIM5_CH3_IC_Init+0xa4>)
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <TIM5_CH3_IC_Init+0xa4>)
 80007fc:	8c1b      	ldrh	r3, [r3, #32]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000804:	b29b      	uxth	r3, r3
 8000806:	8413      	strh	r3, [r2, #32]
	TIM5->CCER |= TIM_CCER_CC3E;
 8000808:	4a18      	ldr	r2, [pc, #96]	; (800086c <TIM5_CH3_IC_Init+0xa4>)
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <TIM5_CH3_IC_Init+0xa4>)
 800080c:	8c1b      	ldrh	r3, [r3, #32]
 800080e:	b29b      	uxth	r3, r3
 8000810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000814:	b29b      	uxth	r3, r3
 8000816:	8413      	strh	r3, [r2, #32]
	TIM5->CCMR2 &= ~(BIT7 | BIT5 | BIT4);
 8000818:	4a14      	ldr	r2, [pc, #80]	; (800086c <TIM5_CH3_IC_Init+0xa4>)
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <TIM5_CH3_IC_Init+0xa4>)
 800081c:	8b9b      	ldrh	r3, [r3, #28]
 800081e:	b29b      	uxth	r3, r3
 8000820:	f023 03b0 	bic.w	r3, r3, #176	; 0xb0
 8000824:	b29b      	uxth	r3, r3
 8000826:	8393      	strh	r3, [r2, #28]
	TIM5->CCMR2 |= (BIT6);
 8000828:	4a10      	ldr	r2, [pc, #64]	; (800086c <TIM5_CH3_IC_Init+0xa4>)
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <TIM5_CH3_IC_Init+0xa4>)
 800082c:	8b9b      	ldrh	r3, [r3, #28]
 800082e:	b29b      	uxth	r3, r3
 8000830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000834:	b29b      	uxth	r3, r3
 8000836:	8393      	strh	r3, [r2, #28]
	//TIM5->CCMR1 &= ~TIM_CCMR1_IC1F;
	TIM5->PSC = 26 - 1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <TIM5_CH3_IC_Init+0xa4>)
 800083a:	2219      	movs	r2, #25
 800083c:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM5->DIER |= TIM_DIER_CC3IE;
 800083e:	4a0b      	ldr	r2, [pc, #44]	; (800086c <TIM5_CH3_IC_Init+0xa4>)
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <TIM5_CH3_IC_Init+0xa4>)
 8000842:	899b      	ldrh	r3, [r3, #12]
 8000844:	b29b      	uxth	r3, r3
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	b29b      	uxth	r3, r3
 800084c:	8193      	strh	r3, [r2, #12]

	NVIC_EnableIRQ(TIM5_IRQn);
 800084e:	2032      	movs	r0, #50	; 0x32
 8000850:	f7ff fd04 	bl	800025c <NVIC_EnableIRQ>

	TIM5->CR1 |= TIM_CR1_CEN;
 8000854:	4a05      	ldr	r2, [pc, #20]	; (800086c <TIM5_CH3_IC_Init+0xa4>)
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <TIM5_CH3_IC_Init+0xa4>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	b29b      	uxth	r3, r3
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	b29b      	uxth	r3, r3
 8000862:	8013      	strh	r3, [r2, #0]
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	40000c00 	.word	0x40000c00

08000870 <configureGPIOA2>:

void configureGPIOA2(){
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
	//AF2 Alternate function

	// Enable clock for GPIOA
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000874:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <configureGPIOA2+0x40>)
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <configureGPIOA2+0x40>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PA6 as alternate function
	GPIOA->MODER &= ~GPIO_MODER_MODER2;
 8000880:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <configureGPIOA2+0x44>)
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <configureGPIOA2+0x44>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800088a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER2_1;
 800088c:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <configureGPIOA2+0x44>)
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <configureGPIOA2+0x44>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f043 0320 	orr.w	r3, r3, #32
 8000896:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (2 << 8);
 8000898:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <configureGPIOA2+0x44>)
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <configureGPIOA2+0x44>)
 800089c:	6a1b      	ldr	r3, [r3, #32]
 800089e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008a2:	6213      	str	r3, [r2, #32]
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020000 	.word	0x40020000

080008b8 <TIM5_CH4_IC_Init>:

void TIM5_CH4_IC_Init(){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80008bc:	4a27      	ldr	r2, [pc, #156]	; (800095c <TIM5_CH4_IC_Init+0xa4>)
 80008be:	4b27      	ldr	r3, [pc, #156]	; (800095c <TIM5_CH4_IC_Init+0xa4>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f043 0308 	orr.w	r3, r3, #8
 80008c6:	6413      	str	r3, [r2, #64]	; 0x40

	TIM5->CCMR2 &= ~TIM_CCMR2_CC4S;
 80008c8:	4a25      	ldr	r2, [pc, #148]	; (8000960 <TIM5_CH4_IC_Init+0xa8>)
 80008ca:	4b25      	ldr	r3, [pc, #148]	; (8000960 <TIM5_CH4_IC_Init+0xa8>)
 80008cc:	8b9b      	ldrh	r3, [r3, #28]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	8393      	strh	r3, [r2, #28]
	TIM5->CCMR2 |= TIM_CCMR2_CC4S_0;
 80008d8:	4a21      	ldr	r2, [pc, #132]	; (8000960 <TIM5_CH4_IC_Init+0xa8>)
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <TIM5_CH4_IC_Init+0xa8>)
 80008dc:	8b9b      	ldrh	r3, [r3, #28]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	8393      	strh	r3, [r2, #28]
	TIM5->CCER &= ~TIM_CCER_CC4P;
 80008e8:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <TIM5_CH4_IC_Init+0xa8>)
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <TIM5_CH4_IC_Init+0xa8>)
 80008ec:	8c1b      	ldrh	r3, [r3, #32]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	8413      	strh	r3, [r2, #32]
	TIM5->CCER |= TIM_CCER_CC4E;
 80008f8:	4a19      	ldr	r2, [pc, #100]	; (8000960 <TIM5_CH4_IC_Init+0xa8>)
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <TIM5_CH4_IC_Init+0xa8>)
 80008fc:	8c1b      	ldrh	r3, [r3, #32]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000904:	b29b      	uxth	r3, r3
 8000906:	8413      	strh	r3, [r2, #32]
	TIM5->CCMR2 &= ~(BIT15 | BIT13 | BIT12);
 8000908:	4915      	ldr	r1, [pc, #84]	; (8000960 <TIM5_CH4_IC_Init+0xa8>)
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <TIM5_CH4_IC_Init+0xa8>)
 800090c:	8b9b      	ldrh	r3, [r3, #28]
 800090e:	b29a      	uxth	r2, r3
 8000910:	f644 73ff 	movw	r3, #20479	; 0x4fff
 8000914:	4013      	ands	r3, r2
 8000916:	b29b      	uxth	r3, r3
 8000918:	838b      	strh	r3, [r1, #28]
	TIM5->CCMR2 |= (BIT14);
 800091a:	4a11      	ldr	r2, [pc, #68]	; (8000960 <TIM5_CH4_IC_Init+0xa8>)
 800091c:	4b10      	ldr	r3, [pc, #64]	; (8000960 <TIM5_CH4_IC_Init+0xa8>)
 800091e:	8b9b      	ldrh	r3, [r3, #28]
 8000920:	b29b      	uxth	r3, r3
 8000922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000926:	b29b      	uxth	r3, r3
 8000928:	8393      	strh	r3, [r2, #28]
	//TIM5->CCMR1 &= ~TIM_CCMR1_IC1F;
	TIM5->PSC = 26 - 1;
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <TIM5_CH4_IC_Init+0xa8>)
 800092c:	2219      	movs	r2, #25
 800092e:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM5->DIER |= TIM_DIER_CC4IE;
 8000930:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <TIM5_CH4_IC_Init+0xa8>)
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <TIM5_CH4_IC_Init+0xa8>)
 8000934:	899b      	ldrh	r3, [r3, #12]
 8000936:	b29b      	uxth	r3, r3
 8000938:	f043 0310 	orr.w	r3, r3, #16
 800093c:	b29b      	uxth	r3, r3
 800093e:	8193      	strh	r3, [r2, #12]

	NVIC_EnableIRQ(TIM5_IRQn);
 8000940:	2032      	movs	r0, #50	; 0x32
 8000942:	f7ff fc8b 	bl	800025c <NVIC_EnableIRQ>

	TIM5->CR1 |= TIM_CR1_CEN;
 8000946:	4a06      	ldr	r2, [pc, #24]	; (8000960 <TIM5_CH4_IC_Init+0xa8>)
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <TIM5_CH4_IC_Init+0xa8>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	b29b      	uxth	r3, r3
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	b29b      	uxth	r3, r3
 8000954:	8013      	strh	r3, [r2, #0]

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	40000c00 	.word	0x40000c00

08000964 <configureGPIOA3>:
void configureGPIOA3(){
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
	//AF2 Alternate function

	// Enable clock for GPIOA
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <configureGPIOA3+0x40>)
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <configureGPIOA3+0x40>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PA6 as alternate function
	GPIOA->MODER &= ~GPIO_MODER_MODER3;
 8000974:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <configureGPIOA3+0x44>)
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <configureGPIOA3+0x44>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800097e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER3_1;
 8000980:	4a09      	ldr	r2, [pc, #36]	; (80009a8 <configureGPIOA3+0x44>)
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <configureGPIOA3+0x44>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800098a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (2 << 12);
 800098c:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <configureGPIOA3+0x44>)
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <configureGPIOA3+0x44>)
 8000990:	6a1b      	ldr	r3, [r3, #32]
 8000992:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000996:	6213      	str	r3, [r2, #32]
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000

080009ac <configureGPIOA6>:


void configureGPIOA6(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
	// Enable clock for GPIOA
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80009b0:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <configureGPIOA6+0x40>)
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <configureGPIOA6+0x40>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PA6 as alternate function
	GPIOA->MODER &= ~GPIO_MODER_MODER6;
 80009bc:	4a0c      	ldr	r2, [pc, #48]	; (80009f0 <configureGPIOA6+0x44>)
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <configureGPIOA6+0x44>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009c6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER6_1;
 80009c8:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <configureGPIOA6+0x44>)
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <configureGPIOA6+0x44>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009d2:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 0x2 << 24;
 80009d4:	4a06      	ldr	r2, [pc, #24]	; (80009f0 <configureGPIOA6+0x44>)
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <configureGPIOA6+0x44>)
 80009d8:	6a1b      	ldr	r3, [r3, #32]
 80009da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009de:	6213      	str	r3, [r2, #32]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020000 	.word	0x40020000

080009f4 <configureGPIOA7>:

void configureGPIOA7(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
	// Enable clock for GPIOA
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <configureGPIOA7+0x40>)
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <configureGPIOA7+0x40>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure PA6 as alternate function
	GPIOA->MODER &= ~GPIO_MODER_MODER7;
 8000a04:	4a0c      	ldr	r2, [pc, #48]	; (8000a38 <configureGPIOA7+0x44>)
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <configureGPIOA7+0x44>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a0e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER7_1;
 8000a10:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <configureGPIOA7+0x44>)
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <configureGPIOA7+0x44>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a1a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 0x2 << 28;
 8000a1c:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <configureGPIOA7+0x44>)
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <configureGPIOA7+0x44>)
 8000a20:	6a1b      	ldr	r3, [r3, #32]
 8000a22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a26:	6213      	str	r3, [r2, #32]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020000 	.word	0x40020000

08000a3c <TIM3_CH1_CH2_IC_Init>:

// Function to configure the timer
void TIM3_CH1_CH2_IC_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	// Enable clock for TIM3
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000a40:	4a36      	ldr	r2, [pc, #216]	; (8000b1c <TIM3_CH1_CH2_IC_Init+0xe0>)
 8000a42:	4b36      	ldr	r3, [pc, #216]	; (8000b1c <TIM3_CH1_CH2_IC_Init+0xe0>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f043 0302 	orr.w	r3, r3, #2
 8000a4a:	6413      	str	r3, [r2, #64]	; 0x40

	// Configure TIM3_CH1 in input capture mode
	TIM3->CCMR1 &= ~TIM_CCMR1_CC1S;
 8000a4c:	4a34      	ldr	r2, [pc, #208]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000a4e:	4b34      	ldr	r3, [pc, #208]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000a50:	8b1b      	ldrh	r3, [r3, #24]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	f023 0303 	bic.w	r3, r3, #3
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	8313      	strh	r3, [r2, #24]
	TIM3->CCMR1 |= TIM_CCMR1_CC1S_0;
 8000a5c:	4a30      	ldr	r2, [pc, #192]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000a5e:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000a60:	8b1b      	ldrh	r3, [r3, #24]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	8313      	strh	r3, [r2, #24]
	TIM3->CCER &= ~TIM_CCER_CC1P;
 8000a6c:	4a2c      	ldr	r2, [pc, #176]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000a6e:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000a70:	8c1b      	ldrh	r3, [r3, #32]
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	f023 0302 	bic.w	r3, r3, #2
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	8413      	strh	r3, [r2, #32]
	TIM3->CCER |= TIM_CCER_CC1E;
 8000a7c:	4a28      	ldr	r2, [pc, #160]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000a7e:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000a80:	8c1b      	ldrh	r3, [r3, #32]
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	8413      	strh	r3, [r2, #32]
	TIM3->CCMR1 &= ~TIM_CCMR1_IC1F;
 8000a8c:	4a24      	ldr	r2, [pc, #144]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000a90:	8b1b      	ldrh	r3, [r3, #24]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	8313      	strh	r3, [r2, #24]

	// Configure TIM3_CH1 in input capture mode
	TIM3->CCMR1 &= ~TIM_CCMR1_CC2S;
 8000a9c:	4a20      	ldr	r2, [pc, #128]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000aa0:	8b1b      	ldrh	r3, [r3, #24]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	8313      	strh	r3, [r2, #24]
	TIM3->CCMR1 |= TIM_CCMR1_CC2S_0;
 8000aac:	4a1c      	ldr	r2, [pc, #112]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000ab0:	8b1b      	ldrh	r3, [r3, #24]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	8313      	strh	r3, [r2, #24]
	TIM3->CCER &= ~TIM_CCER_CC2P;
 8000abc:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000ac0:	8c1b      	ldrh	r3, [r3, #32]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	f023 0320 	bic.w	r3, r3, #32
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	8413      	strh	r3, [r2, #32]
	TIM3->CCER |= TIM_CCER_CC2E;
 8000acc:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000ad0:	8c1b      	ldrh	r3, [r3, #32]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	f043 0310 	orr.w	r3, r3, #16
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	8413      	strh	r3, [r2, #32]
	TIM3->CCMR1 &= ~TIM_CCMR1_IC2F;
 8000adc:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000ae0:	8b1b      	ldrh	r3, [r3, #24]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	8313      	strh	r3, [r2, #24]

	TIM3->PSC = 26 - 1;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000aee:	2219      	movs	r2, #25
 8000af0:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM3->DIER |= (TIM_DIER_CC1IE | TIM_DIER_CC2IE);
 8000af2:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000af6:	899b      	ldrh	r3, [r3, #12]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	f043 0306 	orr.w	r3, r3, #6
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	8193      	strh	r3, [r2, #12]


	// Enable TIM3 global interrupt
	NVIC_EnableIRQ(TIM3_IRQn);
 8000b02:	201d      	movs	r0, #29
 8000b04:	f7ff fbaa 	bl	800025c <NVIC_EnableIRQ>

	// Start TIM3
	TIM3->CR1 |= TIM_CR1_CEN;
 8000b08:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <TIM3_CH1_CH2_IC_Init+0xe4>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	8013      	strh	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40000400 	.word	0x40000400

08000b24 <TIM3_IRQHandler>:


void TIM3_IRQHandler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
	if (TIM3->SR & TIM_SR_CC2IF)
 8000b2a:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <TIM3_IRQHandler+0xd4>)
 8000b2c:	8a1b      	ldrh	r3, [r3, #16]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	f003 0304 	and.w	r3, r3, #4
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d058      	beq.n	8000bea <TIM3_IRQHandler+0xc6>
	{

		if(Is_First_Captured == 0){
 8000b38:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <TIM3_IRQHandler+0xd8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d107      	bne.n	8000b50 <TIM3_IRQHandler+0x2c>
			IC_Val1 = TIM3->CCR2;
 8000b40:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <TIM3_IRQHandler+0xd4>)
 8000b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b44:	4a2e      	ldr	r2, [pc, #184]	; (8000c00 <TIM3_IRQHandler+0xdc>)
 8000b46:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;
 8000b48:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <TIM3_IRQHandler+0xd8>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	601a      	str	r2, [r3, #0]
		  Is_First_Captured = 0;
	  }
  }
*/

}
 8000b4e:	e04c      	b.n	8000bea <TIM3_IRQHandler+0xc6>
			IC_Val2 = TIM3->CCR2;
 8000b50:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <TIM3_IRQHandler+0xd4>)
 8000b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b54:	4a2b      	ldr	r2, [pc, #172]	; (8000c04 <TIM3_IRQHandler+0xe0>)
 8000b56:	6013      	str	r3, [r2, #0]
			if(IC_Val2 > IC_Val1){
 8000b58:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <TIM3_IRQHandler+0xe0>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b28      	ldr	r3, [pc, #160]	; (8000c00 <TIM3_IRQHandler+0xdc>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d907      	bls.n	8000b74 <TIM3_IRQHandler+0x50>
				Difference = IC_Val2 - IC_Val1;
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <TIM3_IRQHandler+0xe0>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <TIM3_IRQHandler+0xdc>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	4a26      	ldr	r2, [pc, #152]	; (8000c08 <TIM3_IRQHandler+0xe4>)
 8000b70:	6013      	str	r3, [r2, #0]
 8000b72:	e00f      	b.n	8000b94 <TIM3_IRQHandler+0x70>
			else if(IC_Val1 > IC_Val2){
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <TIM3_IRQHandler+0xdc>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <TIM3_IRQHandler+0xe0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d909      	bls.n	8000b94 <TIM3_IRQHandler+0x70>
				Difference = (0xFFFF - IC_Val1) + IC_Val2;
 8000b80:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <TIM3_IRQHandler+0xe0>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <TIM3_IRQHandler+0xdc>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000b8e:	33ff      	adds	r3, #255	; 0xff
 8000b90:	4a1d      	ldr	r2, [pc, #116]	; (8000c08 <TIM3_IRQHandler+0xe4>)
 8000b92:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK /(PRESCALAR);
 8000b94:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <TIM3_IRQHandler+0xe8>)
 8000b96:	607b      	str	r3, [r7, #4]
			frequency = refClock/Difference;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <TIM3_IRQHandler+0xe4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	ee07 3a90 	vmov	s15, r3
 8000ba0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ba4:	edd7 6a01 	vldr	s13, [r7, #4]
 8000ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <TIM3_IRQHandler+0xec>)
 8000bae:	edc3 7a00 	vstr	s15, [r3]
			buffer[i++] = frequency;
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <TIM3_IRQHandler+0xf0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	1c5a      	adds	r2, r3, #1
 8000bb8:	4916      	ldr	r1, [pc, #88]	; (8000c14 <TIM3_IRQHandler+0xf0>)
 8000bba:	600a      	str	r2, [r1, #0]
 8000bbc:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <TIM3_IRQHandler+0xec>)
 8000bbe:	6812      	ldr	r2, [r2, #0]
 8000bc0:	4915      	ldr	r1, [pc, #84]	; (8000c18 <TIM3_IRQHandler+0xf4>)
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	440b      	add	r3, r1
 8000bc6:	601a      	str	r2, [r3, #0]
			while(i > ARRAY_SIZE);
 8000bc8:	bf00      	nop
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <TIM3_IRQHandler+0xf0>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000bd2:	dcfa      	bgt.n	8000bca <TIM3_IRQHandler+0xa6>
			TIM3->SR &= ~TIM_SR_CC2IF;
 8000bd4:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <TIM3_IRQHandler+0xd4>)
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <TIM3_IRQHandler+0xd4>)
 8000bd8:	8a1b      	ldrh	r3, [r3, #16]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	f023 0304 	bic.w	r3, r3, #4
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	8213      	strh	r3, [r2, #16]
			Is_First_Captured = 0;
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <TIM3_IRQHandler+0xd8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40000400 	.word	0x40000400
 8000bfc:	20000028 	.word	0x20000028
 8000c00:	2000001c 	.word	0x2000001c
 8000c04:	20000020 	.word	0x20000020
 8000c08:	20000024 	.word	0x20000024
 8000c0c:	497c6760 	.word	0x497c6760
 8000c10:	2000002c 	.word	0x2000002c
 8000c14:	20000058 	.word	0x20000058
 8000c18:	200009e0 	.word	0x200009e0

08000c1c <TIM5_IRQHandler>:
void TIM5_IRQHandler(void){
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0

	if (TIM5->SR & TIM_SR_CC1IF)
 8000c22:	4b79      	ldr	r3, [pc, #484]	; (8000e08 <TIM5_IRQHandler+0x1ec>)
 8000c24:	8a1b      	ldrh	r3, [r3, #16]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d05e      	beq.n	8000cee <TIM5_IRQHandler+0xd2>
	{

		if(CH1_Is_First_Captured == 0){
 8000c30:	4b76      	ldr	r3, [pc, #472]	; (8000e0c <TIM5_IRQHandler+0x1f0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d107      	bne.n	8000c48 <TIM5_IRQHandler+0x2c>
			CH1_IC_Val1 = TIM5->CCR1;
 8000c38:	4b73      	ldr	r3, [pc, #460]	; (8000e08 <TIM5_IRQHandler+0x1ec>)
 8000c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3c:	4a74      	ldr	r2, [pc, #464]	; (8000e10 <TIM5_IRQHandler+0x1f4>)
 8000c3e:	6013      	str	r3, [r2, #0]
			CH1_Is_First_Captured = 1;
 8000c40:	4b72      	ldr	r3, [pc, #456]	; (8000e0c <TIM5_IRQHandler+0x1f0>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	e052      	b.n	8000cee <TIM5_IRQHandler+0xd2>
		}
		else{
			CH1_IC_Val2 = TIM5->CCR1;
 8000c48:	4b6f      	ldr	r3, [pc, #444]	; (8000e08 <TIM5_IRQHandler+0x1ec>)
 8000c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4c:	4a71      	ldr	r2, [pc, #452]	; (8000e14 <TIM5_IRQHandler+0x1f8>)
 8000c4e:	6013      	str	r3, [r2, #0]
			if(CH1_IC_Val2 > CH1_IC_Val1){
 8000c50:	4b70      	ldr	r3, [pc, #448]	; (8000e14 <TIM5_IRQHandler+0x1f8>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b6e      	ldr	r3, [pc, #440]	; (8000e10 <TIM5_IRQHandler+0x1f4>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d907      	bls.n	8000c6c <TIM5_IRQHandler+0x50>
				CH1_Difference = CH1_IC_Val2 - CH1_IC_Val1;
 8000c5c:	4b6d      	ldr	r3, [pc, #436]	; (8000e14 <TIM5_IRQHandler+0x1f8>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b6b      	ldr	r3, [pc, #428]	; (8000e10 <TIM5_IRQHandler+0x1f4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	4a6c      	ldr	r2, [pc, #432]	; (8000e18 <TIM5_IRQHandler+0x1fc>)
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	e00d      	b.n	8000c88 <TIM5_IRQHandler+0x6c>
			}
			else if(CH1_IC_Val1 > CH1_IC_Val2){
 8000c6c:	4b68      	ldr	r3, [pc, #416]	; (8000e10 <TIM5_IRQHandler+0x1f4>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b68      	ldr	r3, [pc, #416]	; (8000e14 <TIM5_IRQHandler+0x1f8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d907      	bls.n	8000c88 <TIM5_IRQHandler+0x6c>
				CH1_Difference = (0xFFFFFFFF - CH1_IC_Val1) + CH1_IC_Val2;
 8000c78:	4b66      	ldr	r3, [pc, #408]	; (8000e14 <TIM5_IRQHandler+0x1f8>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b64      	ldr	r3, [pc, #400]	; (8000e10 <TIM5_IRQHandler+0x1f4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	3b01      	subs	r3, #1
 8000c84:	4a64      	ldr	r2, [pc, #400]	; (8000e18 <TIM5_IRQHandler+0x1fc>)
 8000c86:	6013      	str	r3, [r2, #0]
			}
			float refClock = TIMCLOCK /(PRESCALAR);
 8000c88:	4b64      	ldr	r3, [pc, #400]	; (8000e1c <TIM5_IRQHandler+0x200>)
 8000c8a:	60fb      	str	r3, [r7, #12]
			CH1_frequency = 26 * refClock/CH1_Difference;
 8000c8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c90:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8000c94:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000c98:	4b5f      	ldr	r3, [pc, #380]	; (8000e18 <TIM5_IRQHandler+0x1fc>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ca8:	4b5d      	ldr	r3, [pc, #372]	; (8000e20 <TIM5_IRQHandler+0x204>)
 8000caa:	edc3 7a00 	vstr	s15, [r3]
			CH1_buffer[CH1_i++] = CH1_frequency;
 8000cae:	4b5d      	ldr	r3, [pc, #372]	; (8000e24 <TIM5_IRQHandler+0x208>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	495b      	ldr	r1, [pc, #364]	; (8000e24 <TIM5_IRQHandler+0x208>)
 8000cb6:	600a      	str	r2, [r1, #0]
 8000cb8:	4a59      	ldr	r2, [pc, #356]	; (8000e20 <TIM5_IRQHandler+0x204>)
 8000cba:	edd2 7a00 	vldr	s15, [r2]
 8000cbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cc2:	ee17 1a90 	vmov	r1, s15
 8000cc6:	4a58      	ldr	r2, [pc, #352]	; (8000e28 <TIM5_IRQHandler+0x20c>)
 8000cc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			while(CH1_i > ARRAY_SIZE);
 8000ccc:	bf00      	nop
 8000cce:	4b55      	ldr	r3, [pc, #340]	; (8000e24 <TIM5_IRQHandler+0x208>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000cd6:	dcfa      	bgt.n	8000cce <TIM5_IRQHandler+0xb2>
			TIM5->SR &= ~TIM_SR_CC1IF;
 8000cd8:	4a4b      	ldr	r2, [pc, #300]	; (8000e08 <TIM5_IRQHandler+0x1ec>)
 8000cda:	4b4b      	ldr	r3, [pc, #300]	; (8000e08 <TIM5_IRQHandler+0x1ec>)
 8000cdc:	8a1b      	ldrh	r3, [r3, #16]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	f023 0302 	bic.w	r3, r3, #2
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	8213      	strh	r3, [r2, #16]
			CH1_Is_First_Captured = 0;
 8000ce8:	4b48      	ldr	r3, [pc, #288]	; (8000e0c <TIM5_IRQHandler+0x1f0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
		}
	}
	if (TIM5->SR & TIM_SR_CC2IF)
 8000cee:	4b46      	ldr	r3, [pc, #280]	; (8000e08 <TIM5_IRQHandler+0x1ec>)
 8000cf0:	8a1b      	ldrh	r3, [r3, #16]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d05e      	beq.n	8000dba <TIM5_IRQHandler+0x19e>
	{
		if(CH2_Is_First_Captured == 0){
 8000cfc:	4b4b      	ldr	r3, [pc, #300]	; (8000e2c <TIM5_IRQHandler+0x210>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d107      	bne.n	8000d14 <TIM5_IRQHandler+0xf8>
			CH2_IC_Val1 = TIM5->CCR2;
 8000d04:	4b40      	ldr	r3, [pc, #256]	; (8000e08 <TIM5_IRQHandler+0x1ec>)
 8000d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d08:	4a49      	ldr	r2, [pc, #292]	; (8000e30 <TIM5_IRQHandler+0x214>)
 8000d0a:	6013      	str	r3, [r2, #0]
			CH2_Is_First_Captured = 1;
 8000d0c:	4b47      	ldr	r3, [pc, #284]	; (8000e2c <TIM5_IRQHandler+0x210>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	e052      	b.n	8000dba <TIM5_IRQHandler+0x19e>
		}
		else{
			CH2_IC_Val2 = TIM5->CCR2;
 8000d14:	4b3c      	ldr	r3, [pc, #240]	; (8000e08 <TIM5_IRQHandler+0x1ec>)
 8000d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d18:	4a46      	ldr	r2, [pc, #280]	; (8000e34 <TIM5_IRQHandler+0x218>)
 8000d1a:	6013      	str	r3, [r2, #0]
			if(CH2_IC_Val2 > CH2_IC_Val1){
 8000d1c:	4b45      	ldr	r3, [pc, #276]	; (8000e34 <TIM5_IRQHandler+0x218>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <TIM5_IRQHandler+0x214>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d907      	bls.n	8000d38 <TIM5_IRQHandler+0x11c>
				CH2_Difference = CH2_IC_Val2 - CH2_IC_Val1;
 8000d28:	4b42      	ldr	r3, [pc, #264]	; (8000e34 <TIM5_IRQHandler+0x218>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b40      	ldr	r3, [pc, #256]	; (8000e30 <TIM5_IRQHandler+0x214>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	4a41      	ldr	r2, [pc, #260]	; (8000e38 <TIM5_IRQHandler+0x21c>)
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e00d      	b.n	8000d54 <TIM5_IRQHandler+0x138>
			}
			else if(IC_Val1 > IC_Val2){
 8000d38:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <TIM5_IRQHandler+0x220>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b40      	ldr	r3, [pc, #256]	; (8000e40 <TIM5_IRQHandler+0x224>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d907      	bls.n	8000d54 <TIM5_IRQHandler+0x138>
				CH2_Difference = (0xFFFFFFFF - CH2_IC_Val1) + CH2_IC_Val2;
 8000d44:	4b3b      	ldr	r3, [pc, #236]	; (8000e34 <TIM5_IRQHandler+0x218>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b39      	ldr	r3, [pc, #228]	; (8000e30 <TIM5_IRQHandler+0x214>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	4a39      	ldr	r2, [pc, #228]	; (8000e38 <TIM5_IRQHandler+0x21c>)
 8000d52:	6013      	str	r3, [r2, #0]

			}
			float refClock = TIMCLOCK /(PRESCALAR);
 8000d54:	4b31      	ldr	r3, [pc, #196]	; (8000e1c <TIM5_IRQHandler+0x200>)
 8000d56:	60bb      	str	r3, [r7, #8]
			CH2_frequency = 26 * refClock/Difference;
 8000d58:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d5c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8000d60:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000d64:	4b37      	ldr	r3, [pc, #220]	; (8000e44 <TIM5_IRQHandler+0x228>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	ee07 3a90 	vmov	s15, r3
 8000d6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d74:	4b34      	ldr	r3, [pc, #208]	; (8000e48 <TIM5_IRQHandler+0x22c>)
 8000d76:	edc3 7a00 	vstr	s15, [r3]
			CH2_buffer[CH2_i++] = CH2_frequency;
 8000d7a:	4b34      	ldr	r3, [pc, #208]	; (8000e4c <TIM5_IRQHandler+0x230>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	4932      	ldr	r1, [pc, #200]	; (8000e4c <TIM5_IRQHandler+0x230>)
 8000d82:	600a      	str	r2, [r1, #0]
 8000d84:	4a30      	ldr	r2, [pc, #192]	; (8000e48 <TIM5_IRQHandler+0x22c>)
 8000d86:	edd2 7a00 	vldr	s15, [r2]
 8000d8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d8e:	ee17 1a90 	vmov	r1, s15
 8000d92:	4a2f      	ldr	r2, [pc, #188]	; (8000e50 <TIM5_IRQHandler+0x234>)
 8000d94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			while(CH2_i > ARRAY_SIZE);
 8000d98:	bf00      	nop
 8000d9a:	4b2c      	ldr	r3, [pc, #176]	; (8000e4c <TIM5_IRQHandler+0x230>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000da2:	dcfa      	bgt.n	8000d9a <TIM5_IRQHandler+0x17e>
			TIM5->SR &= ~TIM_SR_CC2IF;
 8000da4:	4a18      	ldr	r2, [pc, #96]	; (8000e08 <TIM5_IRQHandler+0x1ec>)
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <TIM5_IRQHandler+0x1ec>)
 8000da8:	8a1b      	ldrh	r3, [r3, #16]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	f023 0304 	bic.w	r3, r3, #4
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	8213      	strh	r3, [r2, #16]
			CH2_Is_First_Captured = 0;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <TIM5_IRQHandler+0x210>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
		}
	}
	if (TIM5->SR & TIM_SR_CC3IF)
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <TIM5_IRQHandler+0x1ec>)
 8000dbc:	8a1b      	ldrh	r3, [r3, #16]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 8084 	beq.w	8000ed2 <TIM5_IRQHandler+0x2b6>
	{
		if(Is_First_Captured == 0){
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <TIM5_IRQHandler+0x238>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d107      	bne.n	8000de2 <TIM5_IRQHandler+0x1c6>
			IC_Val1 = TIM5->CCR3;
 8000dd2:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <TIM5_IRQHandler+0x1ec>)
 8000dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd6:	4a19      	ldr	r2, [pc, #100]	; (8000e3c <TIM5_IRQHandler+0x220>)
 8000dd8:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <TIM5_IRQHandler+0x238>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	e077      	b.n	8000ed2 <TIM5_IRQHandler+0x2b6>
		}
		else{
			IC_Val2 = TIM5->CCR3;
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <TIM5_IRQHandler+0x1ec>)
 8000de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de6:	4a16      	ldr	r2, [pc, #88]	; (8000e40 <TIM5_IRQHandler+0x224>)
 8000de8:	6013      	str	r3, [r2, #0]
			if(IC_Val2 > IC_Val1){
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <TIM5_IRQHandler+0x224>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <TIM5_IRQHandler+0x220>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d930      	bls.n	8000e58 <TIM5_IRQHandler+0x23c>
				Difference = IC_Val2 - IC_Val1;
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <TIM5_IRQHandler+0x224>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <TIM5_IRQHandler+0x220>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <TIM5_IRQHandler+0x228>)
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	e036      	b.n	8000e74 <TIM5_IRQHandler+0x258>
 8000e06:	bf00      	nop
 8000e08:	40000c00 	.word	0x40000c00
 8000e0c:	2000003c 	.word	0x2000003c
 8000e10:	20000030 	.word	0x20000030
 8000e14:	20000034 	.word	0x20000034
 8000e18:	20000038 	.word	0x20000038
 8000e1c:	497c6760 	.word	0x497c6760
 8000e20:	20000040 	.word	0x20000040
 8000e24:	2000005c 	.word	0x2000005c
 8000e28:	20000e90 	.word	0x20000e90
 8000e2c:	20000050 	.word	0x20000050
 8000e30:	20000044 	.word	0x20000044
 8000e34:	20000048 	.word	0x20000048
 8000e38:	2000004c 	.word	0x2000004c
 8000e3c:	2000001c 	.word	0x2000001c
 8000e40:	20000020 	.word	0x20000020
 8000e44:	20000024 	.word	0x20000024
 8000e48:	20000054 	.word	0x20000054
 8000e4c:	20000060 	.word	0x20000060
 8000e50:	20000530 	.word	0x20000530
 8000e54:	20000028 	.word	0x20000028
			}
			else if(IC_Val1 > IC_Val2){
 8000e58:	4b52      	ldr	r3, [pc, #328]	; (8000fa4 <TIM5_IRQHandler+0x388>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b52      	ldr	r3, [pc, #328]	; (8000fa8 <TIM5_IRQHandler+0x38c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d907      	bls.n	8000e74 <TIM5_IRQHandler+0x258>
				Difference = (0xFFFFFFFF - IC_Val1) + IC_Val2;
 8000e64:	4b50      	ldr	r3, [pc, #320]	; (8000fa8 <TIM5_IRQHandler+0x38c>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b4e      	ldr	r3, [pc, #312]	; (8000fa4 <TIM5_IRQHandler+0x388>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	4a4e      	ldr	r2, [pc, #312]	; (8000fac <TIM5_IRQHandler+0x390>)
 8000e72:	6013      	str	r3, [r2, #0]

			}
			float refClock = TIMCLOCK /(PRESCALAR);
 8000e74:	4b4e      	ldr	r3, [pc, #312]	; (8000fb0 <TIM5_IRQHandler+0x394>)
 8000e76:	607b      	str	r3, [r7, #4]
			frequency = 26 * refClock/Difference;
 8000e78:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e7c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8000e80:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000e84:	4b49      	ldr	r3, [pc, #292]	; (8000fac <TIM5_IRQHandler+0x390>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	ee07 3a90 	vmov	s15, r3
 8000e8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e94:	4b47      	ldr	r3, [pc, #284]	; (8000fb4 <TIM5_IRQHandler+0x398>)
 8000e96:	edc3 7a00 	vstr	s15, [r3]
			buffer[i++] = frequency;
 8000e9a:	4b47      	ldr	r3, [pc, #284]	; (8000fb8 <TIM5_IRQHandler+0x39c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	4945      	ldr	r1, [pc, #276]	; (8000fb8 <TIM5_IRQHandler+0x39c>)
 8000ea2:	600a      	str	r2, [r1, #0]
 8000ea4:	4a43      	ldr	r2, [pc, #268]	; (8000fb4 <TIM5_IRQHandler+0x398>)
 8000ea6:	6812      	ldr	r2, [r2, #0]
 8000ea8:	4944      	ldr	r1, [pc, #272]	; (8000fbc <TIM5_IRQHandler+0x3a0>)
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	440b      	add	r3, r1
 8000eae:	601a      	str	r2, [r3, #0]
			while(i > ARRAY_SIZE);
 8000eb0:	bf00      	nop
 8000eb2:	4b41      	ldr	r3, [pc, #260]	; (8000fb8 <TIM5_IRQHandler+0x39c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000eba:	dcfa      	bgt.n	8000eb2 <TIM5_IRQHandler+0x296>
			TIM5->SR &= ~TIM_SR_CC3IF;
 8000ebc:	4a40      	ldr	r2, [pc, #256]	; (8000fc0 <TIM5_IRQHandler+0x3a4>)
 8000ebe:	4b40      	ldr	r3, [pc, #256]	; (8000fc0 <TIM5_IRQHandler+0x3a4>)
 8000ec0:	8a1b      	ldrh	r3, [r3, #16]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	f023 0308 	bic.w	r3, r3, #8
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	8213      	strh	r3, [r2, #16]
			Is_First_Captured = 0;
 8000ecc:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <TIM5_IRQHandler+0x3a8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
		}
	}
	if (TIM5->SR & TIM_SR_CC4IF)
 8000ed2:	4b3b      	ldr	r3, [pc, #236]	; (8000fc0 <TIM5_IRQHandler+0x3a4>)
 8000ed4:	8a1b      	ldrh	r3, [r3, #16]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	f003 0310 	and.w	r3, r3, #16
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d05a      	beq.n	8000f96 <TIM5_IRQHandler+0x37a>
	{
		if(Is_First_Captured == 0){
 8000ee0:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <TIM5_IRQHandler+0x3a8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d107      	bne.n	8000ef8 <TIM5_IRQHandler+0x2dc>
			IC_Val1 = TIM5->CCR4;
 8000ee8:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <TIM5_IRQHandler+0x3a4>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	4a2d      	ldr	r2, [pc, #180]	; (8000fa4 <TIM5_IRQHandler+0x388>)
 8000eee:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;
 8000ef0:	4b34      	ldr	r3, [pc, #208]	; (8000fc4 <TIM5_IRQHandler+0x3a8>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
			while(i > ARRAY_SIZE);
			TIM5->SR &= ~TIM_SR_CC4IF;
			Is_First_Captured = 0;
		}
	}
}
 8000ef6:	e04e      	b.n	8000f96 <TIM5_IRQHandler+0x37a>
			IC_Val2 = TIM5->CCR4;
 8000ef8:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <TIM5_IRQHandler+0x3a4>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	4a2a      	ldr	r2, [pc, #168]	; (8000fa8 <TIM5_IRQHandler+0x38c>)
 8000efe:	6013      	str	r3, [r2, #0]
			if(IC_Val2 > IC_Val1){
 8000f00:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <TIM5_IRQHandler+0x38c>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <TIM5_IRQHandler+0x388>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d907      	bls.n	8000f1c <TIM5_IRQHandler+0x300>
				Difference = IC_Val2 - IC_Val1;
 8000f0c:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <TIM5_IRQHandler+0x38c>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <TIM5_IRQHandler+0x388>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	4a25      	ldr	r2, [pc, #148]	; (8000fac <TIM5_IRQHandler+0x390>)
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	e00d      	b.n	8000f38 <TIM5_IRQHandler+0x31c>
			else if(IC_Val1 > IC_Val2){
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <TIM5_IRQHandler+0x388>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <TIM5_IRQHandler+0x38c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d907      	bls.n	8000f38 <TIM5_IRQHandler+0x31c>
				Difference = (0xFFFFFFFF - IC_Val1) + IC_Val2;
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <TIM5_IRQHandler+0x38c>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <TIM5_IRQHandler+0x388>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	3b01      	subs	r3, #1
 8000f34:	4a1d      	ldr	r2, [pc, #116]	; (8000fac <TIM5_IRQHandler+0x390>)
 8000f36:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK /(PRESCALAR);
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <TIM5_IRQHandler+0x394>)
 8000f3a:	603b      	str	r3, [r7, #0]
			frequency = 26 * refClock/Difference;
 8000f3c:	edd7 7a00 	vldr	s15, [r7]
 8000f40:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8000f44:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <TIM5_IRQHandler+0x390>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	ee07 3a90 	vmov	s15, r3
 8000f50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <TIM5_IRQHandler+0x398>)
 8000f5a:	edc3 7a00 	vstr	s15, [r3]
			buffer[i++] = frequency;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <TIM5_IRQHandler+0x39c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	4914      	ldr	r1, [pc, #80]	; (8000fb8 <TIM5_IRQHandler+0x39c>)
 8000f66:	600a      	str	r2, [r1, #0]
 8000f68:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <TIM5_IRQHandler+0x398>)
 8000f6a:	6812      	ldr	r2, [r2, #0]
 8000f6c:	4913      	ldr	r1, [pc, #76]	; (8000fbc <TIM5_IRQHandler+0x3a0>)
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	601a      	str	r2, [r3, #0]
			while(i > ARRAY_SIZE);
 8000f74:	bf00      	nop
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <TIM5_IRQHandler+0x39c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f7e:	dcfa      	bgt.n	8000f76 <TIM5_IRQHandler+0x35a>
			TIM5->SR &= ~TIM_SR_CC4IF;
 8000f80:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <TIM5_IRQHandler+0x3a4>)
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <TIM5_IRQHandler+0x3a4>)
 8000f84:	8a1b      	ldrh	r3, [r3, #16]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	f023 0310 	bic.w	r3, r3, #16
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	8213      	strh	r3, [r2, #16]
			Is_First_Captured = 0;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <TIM5_IRQHandler+0x3a8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	2000001c 	.word	0x2000001c
 8000fa8:	20000020 	.word	0x20000020
 8000fac:	20000024 	.word	0x20000024
 8000fb0:	497c6760 	.word	0x497c6760
 8000fb4:	2000002c 	.word	0x2000002c
 8000fb8:	20000058 	.word	0x20000058
 8000fbc:	200009e0 	.word	0x200009e0
 8000fc0:	40000c00 	.word	0x40000c00
 8000fc4:	20000028 	.word	0x20000028

08000fc8 <main>:


int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  TIM3_CH1_CH2_IC_Init();
 8000fcc:	f7ff fd36 	bl	8000a3c <TIM3_CH1_CH2_IC_Init>
  configureGPIOA6();
 8000fd0:	f7ff fcec 	bl	80009ac <configureGPIOA6>
  configureGPIOA7();
 8000fd4:	f7ff fd0e 	bl	80009f4 <configureGPIOA7>


  TIM5_CH1_IC_Init();
 8000fd8:	f7ff fb02 	bl	80005e0 <TIM5_CH1_IC_Init>
  configureGPIOA0(); //AF2 Alternate function
 8000fdc:	f7ff fb56 	bl	800068c <configureGPIOA0>

  TIM5_CH2_IC_Init();
 8000fe0:	f7ff fb78 	bl	80006d4 <TIM5_CH2_IC_Init>
  configureGPIOA1(); //AF2 Alternate function
 8000fe4:	f7ff fbcc 	bl	8000780 <configureGPIOA1>

  TIM5_CH3_IC_Init();
 8000fe8:	f7ff fbee 	bl	80007c8 <TIM5_CH3_IC_Init>
  configureGPIOA2(); //AF2 Alternate function
 8000fec:	f7ff fc40 	bl	8000870 <configureGPIOA2>

  TIM5_CH4_IC_Init();
 8000ff0:	f7ff fc62 	bl	80008b8 <TIM5_CH4_IC_Init>
  configureGPIOA3(); //AF2 Alternate function
 8000ff4:	f7ff fcb6 	bl	8000964 <configureGPIOA3>

  TIM4_CH1_PWM_Init();
 8000ff8:	f7ff f94a 	bl	8000290 <TIM4_CH1_PWM_Init>
  configureGPIOB6();
 8000ffc:	f7ff f988 	bl	8000310 <configureGPIOB6>

  TIM4_CH2_PWM_Init();
 8001000:	f7ff f9b0 	bl	8000364 <TIM4_CH2_PWM_Init>
  configureGPIOB7();
 8001004:	f7ff f9ee 	bl	80003e4 <configureGPIOB7>

  TIM4_CH3_PWM_Init();
 8001008:	f7ff fa16 	bl	8000438 <TIM4_CH3_PWM_Init>
  configureGPIOB8();
 800100c:	f7ff fa54 	bl	80004b8 <configureGPIOB8>

  TIM4_CH4_PWM_Init();
 8001010:	f7ff fa7c 	bl	800050c <TIM4_CH4_PWM_Init>
  configureGPIOB9();
 8001014:	f7ff faba 	bl	800058c <configureGPIOB9>


  while (1){

	  // Set capture compare value 1 to 50
	  TIM4->CCR1 = 50;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <main+0x6c>)
 800101a:	2232      	movs	r2, #50	; 0x32
 800101c:	635a      	str	r2, [r3, #52]	; 0x34

	  // Set capture compare value 4 to 50
	  TIM4->CCR4 = 50;
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <main+0x6c>)
 8001020:	2232      	movs	r2, #50	; 0x32
 8001022:	641a      	str	r2, [r3, #64]	; 0x40

	  // Set capture compare value 3 to 50
	  TIM4->CCR3 = 50;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <main+0x6c>)
 8001026:	2232      	movs	r2, #50	; 0x32
 8001028:	63da      	str	r2, [r3, #60]	; 0x3c

	  // Set capture compare value 2 to 50
	  TIM4->CCR2 = 50;
 800102a:	4b02      	ldr	r3, [pc, #8]	; (8001034 <main+0x6c>)
 800102c:	2232      	movs	r2, #50	; 0x32
 800102e:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM4->CCR1 = 50;
 8001030:	e7f2      	b.n	8001018 <main+0x50>
 8001032:	bf00      	nop
 8001034:	40000800 	.word	0x40000800

08001038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001070 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800103c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800103e:	e003      	b.n	8001048 <LoopCopyDataInit>

08001040 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001042:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001044:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001046:	3104      	adds	r1, #4

08001048 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800104c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800104e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001050:	d3f6      	bcc.n	8001040 <CopyDataInit>
  ldr  r2, =_sbss
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001054:	e002      	b.n	800105c <LoopFillZerobss>

08001056 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001056:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001058:	f842 3b04 	str.w	r3, [r2], #4

0800105c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800105e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001060:	d3f9      	bcc.n	8001056 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001062:	f000 f841 	bl	80010e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001066:	f000 f8f1 	bl	800124c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106a:	f7ff ffad 	bl	8000fc8 <main>
  bx  lr    
 800106e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001070:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001074:	080012b4 	.word	0x080012b4
  ldr  r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800107c:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8001080:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8001084:	200017f0 	.word	0x200017f0

08001088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC_IRQHandler>

0800108a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800109c:	e7fe      	b.n	800109c <HardFault_Handler+0x4>

0800109e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <MemManage_Handler+0x4>

080010a4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <BusFault_Handler+0x4>

080010aa <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <UsageFault_Handler+0x4>

080010b0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ec:	4a16      	ldr	r2, [pc, #88]	; (8001148 <SystemInit+0x60>)
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <SystemInit+0x60>)
 80010f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010fc:	4a13      	ldr	r2, [pc, #76]	; (800114c <SystemInit+0x64>)
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <SystemInit+0x64>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <SystemInit+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800110e:	4a0f      	ldr	r2, [pc, #60]	; (800114c <SystemInit+0x64>)
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <SystemInit+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <SystemInit+0x64>)
 8001120:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <SystemInit+0x68>)
 8001122:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001124:	4a09      	ldr	r2, [pc, #36]	; (800114c <SystemInit+0x64>)
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <SystemInit+0x64>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <SystemInit+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001136:	f000 f80d 	bl	8001154 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800113a:	4b03      	ldr	r3, [pc, #12]	; (8001148 <SystemInit+0x60>)
 800113c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001140:	609a      	str	r2, [r3, #8]
#endif
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00
 800114c:	40023800 	.word	0x40023800
 8001150:	24003010 	.word	0x24003010

08001154 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001162:	4a36      	ldr	r2, [pc, #216]	; (800123c <SetSysClock+0xe8>)
 8001164:	4b35      	ldr	r3, [pc, #212]	; (800123c <SetSysClock+0xe8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800116e:	4b33      	ldr	r3, [pc, #204]	; (800123c <SetSysClock+0xe8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3301      	adds	r3, #1
 800117c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d103      	bne.n	800118c <SetSysClock+0x38>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800118a:	d1f0      	bne.n	800116e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800118c:	4b2b      	ldr	r3, [pc, #172]	; (800123c <SetSysClock+0xe8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001198:	2301      	movs	r3, #1
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	e001      	b.n	80011a2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800119e:	2300      	movs	r3, #0
 80011a0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d142      	bne.n	800122e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80011a8:	4a24      	ldr	r2, [pc, #144]	; (800123c <SetSysClock+0xe8>)
 80011aa:	4b24      	ldr	r3, [pc, #144]	; (800123c <SetSysClock+0xe8>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80011b4:	4a22      	ldr	r2, [pc, #136]	; (8001240 <SetSysClock+0xec>)
 80011b6:	4b22      	ldr	r3, [pc, #136]	; (8001240 <SetSysClock+0xec>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011be:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80011c0:	4a1e      	ldr	r2, [pc, #120]	; (800123c <SetSysClock+0xe8>)
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <SetSysClock+0xe8>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80011c8:	4a1c      	ldr	r2, [pc, #112]	; (800123c <SetSysClock+0xe8>)
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <SetSysClock+0xe8>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011d2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80011d4:	4a19      	ldr	r2, [pc, #100]	; (800123c <SetSysClock+0xe8>)
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <SetSysClock+0xe8>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80011de:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <SetSysClock+0xe8>)
 80011e2:	4a18      	ldr	r2, [pc, #96]	; (8001244 <SetSysClock+0xf0>)
 80011e4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80011e6:	4a15      	ldr	r2, [pc, #84]	; (800123c <SetSysClock+0xe8>)
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <SetSysClock+0xe8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011f0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80011f2:	bf00      	nop
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <SetSysClock+0xe8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f9      	beq.n	80011f4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <SetSysClock+0xf4>)
 8001202:	f240 7205 	movw	r2, #1797	; 0x705
 8001206:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001208:	4a0c      	ldr	r2, [pc, #48]	; (800123c <SetSysClock+0xe8>)
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <SetSysClock+0xe8>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f023 0303 	bic.w	r3, r3, #3
 8001212:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001214:	4a09      	ldr	r2, [pc, #36]	; (800123c <SetSysClock+0xe8>)
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <SetSysClock+0xe8>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f043 0302 	orr.w	r3, r3, #2
 800121e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001220:	bf00      	nop
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <SetSysClock+0xe8>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b08      	cmp	r3, #8
 800122c:	d1f9      	bne.n	8001222 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40007000 	.word	0x40007000
 8001244:	07405419 	.word	0x07405419
 8001248:	40023c00 	.word	0x40023c00

0800124c <__libc_init_array>:
 800124c:	b570      	push	{r4, r5, r6, lr}
 800124e:	4e0d      	ldr	r6, [pc, #52]	; (8001284 <__libc_init_array+0x38>)
 8001250:	4c0d      	ldr	r4, [pc, #52]	; (8001288 <__libc_init_array+0x3c>)
 8001252:	1ba4      	subs	r4, r4, r6
 8001254:	10a4      	asrs	r4, r4, #2
 8001256:	2500      	movs	r5, #0
 8001258:	42a5      	cmp	r5, r4
 800125a:	d109      	bne.n	8001270 <__libc_init_array+0x24>
 800125c:	4e0b      	ldr	r6, [pc, #44]	; (800128c <__libc_init_array+0x40>)
 800125e:	4c0c      	ldr	r4, [pc, #48]	; (8001290 <__libc_init_array+0x44>)
 8001260:	f000 f818 	bl	8001294 <_init>
 8001264:	1ba4      	subs	r4, r4, r6
 8001266:	10a4      	asrs	r4, r4, #2
 8001268:	2500      	movs	r5, #0
 800126a:	42a5      	cmp	r5, r4
 800126c:	d105      	bne.n	800127a <__libc_init_array+0x2e>
 800126e:	bd70      	pop	{r4, r5, r6, pc}
 8001270:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001274:	4798      	blx	r3
 8001276:	3501      	adds	r5, #1
 8001278:	e7ee      	b.n	8001258 <__libc_init_array+0xc>
 800127a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800127e:	4798      	blx	r3
 8001280:	3501      	adds	r5, #1
 8001282:	e7f2      	b.n	800126a <__libc_init_array+0x1e>
 8001284:	080012ac 	.word	0x080012ac
 8001288:	080012ac 	.word	0x080012ac
 800128c:	080012ac 	.word	0x080012ac
 8001290:	080012b0 	.word	0x080012b0

08001294 <_init>:
 8001294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001296:	bf00      	nop
 8001298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800129a:	bc08      	pop	{r3}
 800129c:	469e      	mov	lr, r3
 800129e:	4770      	bx	lr

080012a0 <_fini>:
 80012a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a2:	bf00      	nop
 80012a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012a6:	bc08      	pop	{r3}
 80012a8:	469e      	mov	lr, r3
 80012aa:	4770      	bx	lr
